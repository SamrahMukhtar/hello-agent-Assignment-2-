# Import necessary libraries
import os  # For accessing environment variables

# Import modules from a custom 'agents' library
from agents import (
    Agent,
    AsyncOpenAI,
    OpenAIChatCompletionsModel,
    Runner,
    set_default_openai_client,
    set_tracing_disabled,
)
from dotenv import load_dotenv  # To load environment variables from a .env file

# Load environment variables from .env file into the environment
load_dotenv()

# Get the Gemini API key from the environment variables
gemini_api_key = os.getenv("GEMINI_API_KEY")

# Initialize an asynchronous OpenAI-style client with the Gemini API key and URL
external_client = AsyncOpenAI(
    api_key=gemini_api_key,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/",
)

# Set the external client as the default OpenAI client
set_default_openai_client(external_client)

# Disable tracing/logging for this run
set_tracing_disabled(True)
# Define the chat model to use with the agent
model = OpenAIChatCompletionsModel(
    model="gemini-2.0-flash", openai_client=external_client
)


# Define a function to create and run your first AI agent
def my_first_agent():
    # Create an agent with a name, instructions, and the model to use
    agent = Agent(
        name="Assistant", instructions="You are a helpful assistant", model=model
    )
    # Run the agent synchronously with a test input prompt
    result = Runner.run_sync(agent, "Hello, world! This is my First Agent")
    # Print the final output generated by the agent
    print(result.final_output)
